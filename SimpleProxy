//Daniel Hara - Exercício do Proxy //CES-22 Prof. Yano


import java.io.*;
import java.net.*;

//Esta classe implementa um aplicativo Proxy entre um navegador e a Web.
//Este programa funciona melhor com páginas Web HTML de Texto Puro.

public class SimpleProxy  {

	//Declaração de variáveis
	
	InputStream streamFromClient;
	OutputStream streamToClient;
	
	InputStream streamFromServer;
	OutputStream streamToServer;
	
	Socket client;
	Socket server;
	
	ServerSocket ss;
	
	//Os próximos dois métodos foram desenvolvidos para retirar a informação Host
	//da String message, que é a requisição do cliente convertida de Bytes para String.
	//Devemos obter o Host do endereço da Web que será acessado.
	
	public String getPath (String message)
	{
		if (message.substring(0,4).compareTo("GET ") == 0)
			return message.substring(4,message.indexOf('\n') - 10);
		else {
			System.out.println("ERRO: Formato Errado!");
			return null;
		}
	}
	
	//Esta é uma função intermediária que retorna o índice do primeiro w do Host a ser acessado
	//na String (formato "www.abc.com").
	public int getIndexOf_Host (String message)
	{
		int i = 0;
		boolean achou;
		for (achou = false; !achou; i++)
		{
			if (i + 4 < message.length() - 1)
				if ( message.charAt(i) == '\n' && message.charAt(i+1) == 'H' && message.charAt(i+2) == 'o' && message.charAt(i+3) == 's' && message.charAt(i+4) == 't')
					achou = true;
				else ;
			else break;
		}
		if (achou)
			return i + 6; //índice do primeiro w
		else
		{
			System.out.println("String ERRADA: NAO CONTEM HOST!");
			return 0;
		}
	}
	
	//Esta função retorna o endereço da Web contido na string message

	public String getHost (String message)
	{
		int i;
		boolean achou = false;
		char digito;
		
		String Sub_Message = message.substring(getIndexOf_Host(message));
		System.out.println("Submessage = " + Sub_Message);
		
		i = 0;
		digito = Sub_Message.charAt(0);
		while (digito != ';' && digito != ':' && digito != '\n' && digito != '/' && digito > ' ') 
		{
			i++;
			digito = Sub_Message.charAt(i);
		}
		return Sub_Message.substring(0, i);
		
	}
	
	public SimpleProxy (int localport, int remoteport) throws IOException
	{
		byte[] request = new byte[1024];     //Declaração de variáveis.
		byte[] reply = new byte[4096];
		
		String message = null;				//Inicialização de variáveis.
		String path = null;
		String host = null;
		
		streamFromClient = null;
		streamToClient = null;
		
		streamFromServer = null;
	    streamToServer = null;
		
		int bytesRead = 0;
		int bytesRead2 = 0;
		
		ss = new ServerSocket(localport);
		System.out.println("TENTANDO!");
		
		client = null;
		server = null;
		
		while(true)
		{
			if (client == null)
			{
				try
				{	//Esperar por algum cliente se conectar e criar um Socket para se conectar com um cliente.
					client = ss.accept();
					streamFromClient = client.getInputStream();
					streamToClient = client.getOutputStream();
					client.setSoTimeout(1000);   //Não permitir que as Streams bloqueiem indefinidamente, caso não recebam dados.
					
					System.out.println("Se conectando com o cliente!");
				} catch (IOException e)
				{
					System.out.println("ERRO: !" + e);
				}
			
					//Ler do Cliente
				try
				{
					bytesRead = streamFromClient.read(request);
				
					message = new String(request, "US-ASCII");
					System.out.println("Message = " + message);   //Exibir requisição na tela, para auxiliar o acompanhamento do programa.
					
					host = getHost (message);					//Obter o Host a ser usado para se conectar ao Servidor.
					System.out.println("\nHost = " + host + "<= " );
				
				} catch (IOException e)
				{
					System.out.println("ERRO: " + e);
				}
			
				if (client != null)
				{
					if (server == null)   //Conectar com o Server
					{
						System.out.println("Entrei no if do Server!");
						try 
						{ 
							server = new Socket (host, remoteport);    //Criar o Socket e as Streams
							streamToServer = server.getOutputStream();
							streamFromServer = server.getInputStream();
						
							server.setSoTimeout(1000);		   //Não permitir que as Streams bloqueiem indefinidamente, caso não recebam dados.			
						
						} catch (IOException e) 
						{
							System.out.println("CONEXAO RECUSADA!");    //Caso não consiga conectar
						}
					}
					try
					{
						streamToServer.write(request, 0, bytesRead);
						streamToServer.flush();
					} catch (IOException e) {   }
					
				//Dar um Read no Server
					try
					{
						while ( (bytesRead2 = streamFromServer.read(reply)) != -1)
						{
							streamToClient.write(reply, 0, bytesRead2);
							streamToClient.flush();
					
							System.out.println("Vou receber do Server!");
					
							String resposta = new String (reply, "US-ASCII");
							System.out.println("O Reply eh este: " + resposta);
						}
					
					
					} catch (IOException e) {  }
				}  // if (client != null)
			} //if(client == null)
			
			if (streamToServer != null)
			{
				try
				{
					streamToServer.close();
				} catch (IOException e) {System.err.println(e);  }
			}
			
			
			if (streamToClient != null)
				try { streamToClient.close(); }
	    		catch (IOException e) {  System.err.println(e); }
			
			try {
				if (server != null)
				{
					server.close();
					server = null;
				}
				if (client != null)
				{
					client.close();
					client = null;
				}
			} catch (IOException e) { System.err.println(e);   }   
			
			
			
		}    //Acabou while
		
	
	} 
	
	public static void main (String args[]) throws IOException
	{
		SimpleProxy Proxy = new SimpleProxy(8011, 80);
	}
	
	
}
